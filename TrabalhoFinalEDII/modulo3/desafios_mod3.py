import json
import os
from modulo3.grafo import Grafo
from modulo3.algoritmos_grafo import busca_em_profundidade, busca_em_largura, dijkstra, welch_powell, ordenacao_topologica, prim_mst

def carregar_malha_padrao(arquivo="malha_logistica.json"):
    diretorio_atual = os.path.dirname(os.path.abspath(__file__))
    caminho_dados = os.path.join(diretorio_atual, '..', 'Dados', arquivo)

    try:
        with open(caminho_dados, 'r', encoding='utf-8') as f:
            dados = json.load(f)
        
        print(f"\nCarregando malha do arquivo '{arquivo}'...")
        
        grafo_novo = Grafo()
        for local in dados['locais']:
            grafo_novo.adicionar_local(local)
            
        for rota in dados['rotas']:
            grafo_novo.adicionar_rota(rota['origem'], rota['destino'], rota['custo'])
            
        print("Malha log√≠stica carregada com sucesso!")
        return grafo_novo

    except FileNotFoundError:
        print(f"** Erro: Arquivo '{caminho_dados}' n√£o encontrado. **")
        print("Execute o 'gerador_malha_logistica.py' na pasta 'Dados' primeiro.")
        return None
    except (json.JSONDecodeError, KeyError) as e:
        print(f"** Erro ao ler o arquivo JSON: {e} **")
        return None

def executar_desafio_dfs(mapa):
    print("\n--- üîç Desafio DFS: Rota de Inspe√ß√£o Profunda ---")
    if not mapa.locais:
        print("** O mapa est√° vazio. Carregue uma malha log√≠stica primeiro. **")
        return
    
    inicio = input(f"Digite o centro de distribui√ß√£o inicial ({', '.join(mapa.locais[:3])}, etc.): ")
    if inicio not in mapa.locais:
        print(f"** Erro: Local '{inicio}' n√£o existe no mapa. **")
        return
        
    print(f"\n[MISS√ÉO]: Um inspetor precisa visitar o m√°ximo de locais interconectados a partir de '{inicio}',")
    print("           seguindo cada rota at√© o fim antes de voltar. A DFS simula essa explora√ß√£o.")
    input("\nPressione Enter para iniciar a busca em profundidade...")
    
    caminho_dfs = busca_em_profundidade(mapa, inicio)
    
    print("\n--- Resultado da Explora√ß√£o (DFS) ---")
    print("Ordem de visita para uma explora√ß√£o profunda:")
    print(" -> ".join(caminho_dfs))

def executar_desafio_bfs(mapa):
    print("\n--- üåä Desafio BFS: An√°lise de Capilaridade da Rede ---")
    if not mapa.locais:
        print("** O mapa est√° vazio. Carregue uma malha log√≠stica primeiro. **")
        return
        
    inicio = input(f"Digite o centro de distribui√ß√£o para a an√°lise ({', '.join(mapa.locais[:3])}, etc.): ")
    if inicio not in mapa.locais:
        print(f"** Erro: Local '{inicio}' n√£o existe no mapa. **")
        return
        
    print(f"\n[MISS√ÉO]: Analisar a capilaridade da rede a partir de '{inicio}'.")
    print("           A BFS √© ideal para descobrir todos os locais alcan√ß√°veis e a quantos 'saltos' (rotas) de dist√¢ncia eles est√£o.")
    input("\nPressione Enter para iniciar a busca em largura...")
    
    distancias = busca_em_largura(mapa, inicio)
    
    print("\n--- Resultado da An√°lise de Proximidade (BFS) ---")
    niveis = {}
    for local, dist in distancias.items():
        if dist not in niveis:
            niveis[dist] = []
        niveis[dist].append(local)
    
    for nivel, locais in sorted(niveis.items()):
        print(f"Dist√¢ncia de {nivel} saltos: {', '.join(locais)}")
        
def executar_desafio_dijkstra(mapa):
    print("\n--- üìà Desafio Dijkstra: Otimiza√ß√£o de Rota de Entrega ---")
    if not mapa.locais:
        print("** O mapa est√° vazio. Carregue uma malha log√≠stica primeiro. **")
        return
    
    print("Locais dispon√≠veis:", ", ".join(mapa.locais))
    inicio = input("Digite o local de partida: ")
    fim = input("Digite o local de destino: ")
    
    if inicio not in mapa.locais or fim not in mapa.locais:
        print("** Erro: Um dos locais digitados n√£o existe no mapa. **")
        return
        
    print(f"\n[MISS√ÉO]: Calcular a rota mais curta e de menor custo (dist√¢ncia) entre '{inicio}' e '{fim}'.")
    print("           O Algoritmo de Dijkstra garantir√° o caminho mais eficiente.")
    input("\nPressione Enter para calcular a rota √≥tima...")
    
    caminho, custo = dijkstra(mapa, inicio, fim)
    
    print("\n--- Resultado do C√°lculo de Rota (Dijkstra) ---")
    if caminho:
        print(f"‚úÖ Rota Mais Eficiente Encontrada:")
        print(f"   Caminho: {' -> '.join(caminho)}")
        print(f"   Custo Total (Dist√¢ncia): {custo} km")
    else:
        print(f"‚ùå N√£o foi poss√≠vel encontrar uma rota entre '{inicio}' e '{fim}'.")

def executar_desafio_coloracao(mapa):
    print("\n--- üé® Desafio de Colora√ß√£o: Aloca√ß√£o de Docks de Carga ---")
    print("[MISS√ÉO]: Centros de distribui√ß√£o vizinhos n√£o podem ter entregas da mesma transportadora no mesmo dia para evitar congestionamento.")
    print("           O algoritmo de colora√ß√£o determinar√° o n√∫mero m√≠nimo de 'dias/transportadoras' (cores) necess√°rios para operar sem conflitos.")
    input("\nPressione Enter para calcular a aloca√ß√£o √≥tima...")

    coloring, num_cores = welch_powell(mapa)
    
    print("\n--- Resultado da Aloca√ß√£o (Welch-Powell) ---")
    print(f"‚úÖ N√∫mero m√≠nimo de 'cores' (dias/transportadoras) necess√°rias: {num_cores}")
    
    dias = {}
    for local, cor in coloring.items():
        if cor not in dias:
            dias[cor] = []
        dias[cor].append(local)
        
    for dia, locais in sorted(dias.items()):
        print(f"  - Dia/Transportadora {dia}: {', '.join(locais)}")

def executar_desafio_ordenacao(mapa_logistico):
    print("\n--- üìÖ Desafio de Ordena√ß√£o Topol√≥gica: Sequenciamento de Carregamento de Cont√™iner ---")
    print("[MISS√ÉO]: Um cont√™iner precisa ser carregado com diferentes tipos de mercadorias.")
    print("           A ordem √© cr√≠tica para a seguran√ßa: itens pesados no fundo, fr√°geis por √∫ltimo, e alguns produtos n√£o podem ser vizinhos.")
    print("           Vamos usar a Ordena√ß√£o Topol√≥gica para gerar um plano de carregamento seguro e eficiente.")
    input("\nPressione Enter para construir o grafo de regras de carregamento e encontrar a sequ√™ncia...")

    grafo_carga = Grafo()
    
    etapas = [
        "Maquinario Pesado (Fundo)",
        "Eletronicos",
        "Alimentos Secos",
        "Tambores Quimicos (Area Isolada)",
        "Vidraria (Fragil)",
        "Preencher Espacos Vazios com Isopor",
        "Lacre e Inspecao Final"
    ]
    for etapa in etapas:
        grafo_carga.adicionar_local(etapa)

    print("\n[SISTEMA]: Construindo o mapa de depend√™ncias direcionadas do plano de carga...")

    grafo_carga.adicionar_rota("Maquinario Pesado (Fundo)", "Eletronicos", 1, direcionada=True)
    grafo_carga.adicionar_rota("Eletronicos", "Vidraria (Fragil)", 1, direcionada=True)
    grafo_carga.adicionar_rota("Alimentos Secos", "Lacre e Inspecao Final", 1, direcionada=True)
    grafo_carga.adicionar_rota("Tambores Quimicos (Area Isolada)", "Lacre e Inspecao Final", 1, direcionada=True)
    grafo_carga.adicionar_rota("Vidraria (Fragil)", "Preencher Espacos Vazios com Isopor", 1, direcionada=True)
    grafo_carga.adicionar_rota("Preencher Espacos Vazios com Isopor", "Lacre e Inspecao Final", 1, direcionada=True)
    
    print("\nVisualiza√ß√£o do Grafo de Regras de Carregamento (Lista de Adjac√™ncias):")
    grafo_carga.visualizar_mapa()

    input("\nPressione Enter para executar o algoritmo de Kahn e gerar o plano...")

    ordem = ordenacao_topologica(grafo_carga)
    
    print("\n--- Resultado do Sequenciamento (Kahn's Algorithm) ---")
    if ordem:
        print("‚úÖ Plano de Carregamento V√°lido Gerado:")

        for i, passo in enumerate(ordem):
            print(f"   Passo {i+1}: {passo}")
            
    else:
        print("‚ùå ERRO: Foi detectado um ciclo de depend√™ncias nas regras! (Ex: Carga A deve vir antes de B, e B antes de A). O plano √© inv√°lido.")

def executar_desafio_mst(mapa):
    print("\n--- üå≥ Desafio da √Årvore Geradora M√≠nima: Rede de Fibra √ìptica ---")
    print("[MISS√ÉO]: Conectar todos os centros de distribui√ß√£o com uma rede de fibra √≥ptica.")
    print("           O custo para passar o cabo entre duas cidades √© a dist√¢ncia entre elas.")
    print("           O algoritmo de Prim calcular√° a rede de menor custo total que conecta todos, sem criar caminhos redundantes (ciclos).")
    input("\nPressione Enter para calcular a rede de custo m√≠nimo...")
    
    mst, custo_total = prim_mst(mapa)
    
    print("\n--- Resultado do Planejamento da Rede (Prim's Algorithm) ---")
    print(f"‚úÖ Rede de custo m√≠nimo encontrada com sucesso!")
    print(f"   Custo Total de Instala√ß√£o: {custo_total} (unidades de custo)")
    print("   Conex√µes da Rede:")
    for origem, destino, custo in mst:
        print(f"     - {origem} <--> {destino} (Custo: {custo})")

def menu_submodulo1(mapa):
    while True:
        print("\n--- [Subm√≥dulo 1: Fundamentos e Representa√ß√£o] ---")
        print("1. Visualizar Mapa (Lista e Matriz)")
        print("2. Adicionar Novo Centro de Distribui√ß√£o (Local)")
        print("3. Adicionar Nova Rota")
        print("0. Voltar ao menu de Grafos")

        opcao = input("Escolha uma op√ß√£o: ")
        if opcao == '1':
            mapa.visualizar_mapa()
        elif opcao == '2':
            nome_local = input("Digite o nome do novo Centro de Distribui√ß√£o: ")
            if nome_local:
                mapa.adicionar_local(nome_local)
        elif opcao == '3':
            origem = input("Digite o local de origem: ")
            destino = input("Digite o local de destino: ")
            try:
                custo = int(input("Digite o custo/dist√¢ncia da rota: "))
                mapa.adicionar_rota(origem, destino, custo)
            except ValueError:
                print("** Erro: O custo deve ser um n√∫mero inteiro. **")
        elif opcao == '0':
            break
        else:
            print("** Op√ß√£o inv√°lida. **")

def menu_submodulo2(mapa):
    while True:
        print("\n--- [Subm√≥dulo 2: Navega√ß√£o e Caminhos √ìtimos] ---")
        print("1. Desafio de Explora√ß√£o (DFS)")
        print("2. Desafio de Proximidade (BFS)")
        print("3. Desafio da Rota Mais R√°pida (Dijkstra)")
        print("0. Voltar ao menu de Grafos")

        opcao = input("Escolha uma op√ß√£o: ")
        if opcao == '1':
            executar_desafio_dfs(mapa)
        elif opcao == '2':
            executar_desafio_bfs(mapa)
        elif opcao == '3':
            executar_desafio_dijkstra(mapa)
        elif opcao == '0':
            break
        else:
            print("** Op√ß√£o inv√°lida. **")

def menu_submodulo3(mapa):
    """Menu para os desafios de Otimiza√ß√£o de Processos."""
    while True:
        print("\n--- [Subm√≥dulo 3: Otimiza√ß√£o de Caminho e Processo] ---")
        print("1. Desafio de Aloca√ß√£o de Recursos (Colora√ß√£o)")
        print("2. Desafio de Sequenciamento de Tarefas (Ordena√ß√£o Topol√≥gica)")
        print("3. Desafio de Rede de Custo M√≠nimo (√Årvore Geradora M√≠nima)")
        print("0. Voltar ao menu de Grafos")

        opcao = input("Escolha uma op√ß√£o: ")
        if opcao == '1':
            executar_desafio_coloracao(mapa)
        elif opcao == '2':
            executar_desafio_ordenacao(mapa)
        elif opcao == '3':
            executar_desafio_mst(mapa)
        elif opcao == '0':
            break
        else:
            print("** Op√ß√£o inv√°lida. **")

def menu_desafios_grafos():
    mapa = Grafo()
    print("\nBem-vindo ao M√≥dulo de Grafos. Um mapa vazio foi criado.")
    print("Use a op√ß√£o 'Carregar Malha Log√≠stica' para come√ßar.")
    
    while True:
        print("\n--- üó∫Ô∏è M√≥dulo 3: Desafios de Malha Log√≠stica (Grafos) ---")
        print("\nSelecione uma a√ß√£o ou um subm√≥dulo para explorar:")
        print("1. Carregar Malha Log√≠stica Padr√£o (Substitui o mapa atual)")
        print("---------------------------------------------------------")
        print("2. Acessar [Subm√≥dulo 1: Fundamentos e Representa√ß√£o]")
        print("3. Acessar [Subm√≥dulo 2: Navega√ß√£o e Caminhos √ìtimos]")
        print("4. Acessar [Subm√≥dulo 3: Otimiza√ß√£o de Processos]")
        print("---------------------------------------------------------")
        print("0. Voltar ao Menu Principal")
        
        opcao = input("Escolha uma op√ß√£o: ")
        
        if opcao == '1':
            mapa_carregado = carregar_malha_padrao()
            if mapa_carregado:
                mapa = mapa_carregado
        elif opcao == '2' or opcao == '3' or opcao == '4':
            if not mapa.locais:
                print("\n** ATEN√á√ÉO: O mapa est√° vazio. Carregue uma malha primeiro (Op√ß√£o 1). **")
                continue
            
            if opcao == '2':
                menu_submodulo1(mapa)
            elif opcao == '3':
                menu_submodulo2(mapa)
            elif opcao == '4':
                menu_submodulo3(mapa)
        elif opcao == '0':
            print("Retornando ao Menu Principal...")
            break
        else:
            print("** Op√ß√£o inv√°lida. Tente novamente. **")